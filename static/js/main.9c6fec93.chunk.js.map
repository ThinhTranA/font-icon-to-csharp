{"version":3,"sources":["assets/images/dragdropfiles.svg","assets/images/iconslogo.svg","utils/asyncFileReader.ts","font-parsers/typeFont.ts","context/AppContext.tsx","components/layout/LoadingComponent.tsx","components/UploadFile.tsx","utils/stringUtils.ts","code-gen/csharpCodegen.ts","components/FontIcon.tsx","components/FontIconList.tsx","editor/Editor.tsx","assets/images/font2csharp.svg","components/layout/NavBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["readFileAsArrayBuffer","file","readFile","FileReader","prototype","readAsArrayBuffer","fileReaderMethod","fr","Promise","resolve","reject","onload","result","onerror","abort","DOMException","call","getTypeFontGlyphs","a","fileContent","font","opentype","parse","glyphs","parseGlyphs","console","log","i","length","glyph","get","unicode","push","AppContext","createContext","fontFilename","updateFontFilename","filename","AppContextProvider","Consumer","Provider","LoadingComponent","inverted","content","Dimmer","active","Loader","UploadFile","history","useHistory","useState","isLoading","setIsLoading","useContext","onDrop","useCallback","acceptedFiles","name","endsWith","fileName","useDropzone","accept","getRootProps","getInputProps","isDragActive","className","Grid","columns","stackable","Column","width","src","dragDropFilesImage","alt","Button","style","backgroundColor","color","Divider","vertical","iconslogo","toUnicodeString","prefix","unicodeString","toString","padStart","generateCsharpClassCode","s","forEach","_","upperFirst","camelCase","addGlyphToClass","generateCsharpEnumCode","enumName","addGlyphToEnum","FontIcon","ref","getPath","height","ctx","getContext","path","fill","draw","FontIconList","screenPercent","windowDimensions","window","innerWidth","innerHeight","getWindowDimensions","glyphsToDisplay","setGlyphsToDisplay","setFilter","iconColumnsCount","Math","floor","fontSize","onChange","e","filter","g","includes","target","value","type","placeholder","glyphsCopy","gridArray","gridRow","shift","map","row","idx","Row","gly","fontIconsGrid","codeTypeOptions","key","text","Editor","useLocation","state","csharpClassName","split","csharpEnumName","csharpCode","setCsharpCode","saveEditCsharpCode","debounce","nextValue","copyCode","toast","success","generatedCodeType","setGeneratedCodeType","Container","relaxed","fontListWidth","display","margin","justifyContent","position","hideProgressBar","theme","autoClose","onCopy","Icon","Dropdown","button","floating","labeled","option","options","editedCode","defaultLanguage","NavBar","uploadFileName","infoValue","setInfoValue","Menu","fixed","secondary","Item","header","font2csharp","as","NavLink","to","undefined","Group","icon","open","App","setFontfileName","appContextValues","basename","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c6fec93.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/dragdropfiles.07b800f3.svg\";","export default __webpack_public_path__ + \"static/media/iconslogo.b5286b7c.svg\";","export function readFileAsText(file: File) {\n  return readFile(FileReader.prototype.readAsText, file);\n}\n\nexport function readFileAsArrayBuffer(file: File) {\n  return readFile(FileReader.prototype.readAsArrayBuffer, file);\n}\n\nexport function readFile(fileReaderMethod: any, file: File) {\n  const fr = new FileReader();\n\n  return new Promise((resolve, reject) => {\n    fr.onload = () => resolve(fr.result);\n    fr.onerror = () => {\n      fr.abort();\n      reject(new DOMException('Problem parsing input file.'));\n    };\n    fileReaderMethod.call(fr, file);\n  });\n}\n","import opentype, { Font, Glyph } from 'opentype.js';\nimport { readFileAsArrayBuffer } from '../utils/asyncFileReader';\n\nexport async function getTypeFontGlyphs(file: File) {\n  try {\n    const fileContent = await readFileAsArrayBuffer(file);\n    const font = opentype.parse(fileContent);\n    const glyphs = parseGlyphs(font);\n\n    return glyphs;\n  } catch (ex) {\n    console.log(ex);\n  }\n}\n\nfunction parseGlyphs(font: Font) {\n  const glyphs: Glyph[] = [];\n\n  for (let i = 0; i < font.glyphs.length; i++) {\n    var glyph = font.glyphs.get(i);\n    if (glyph.unicode) glyphs.push(glyph);\n  }\n  return glyphs;\n}\n","import { createContext } from 'react';\n\nexport interface IAppActions {\n  type: 'set_font_filename';\n  filename: string;\n}\n\nexport interface IAppState {\n  fontFileName: string;\n}\n\nexport interface IAppContextProps {\n  fontFilename: string;\n  updateFontFilename: (filename: string) => void;\n}\n\nexport const initialAppState: IAppState = {\n  fontFileName: '',\n};\n\nconst AppContext = createContext<IAppContextProps>({\n  fontFilename: '',\n  updateFontFilename: (filename: string) => {},\n});\n\nexport const AppContextConsumer = AppContext.Consumer;\nexport const AppContextProvider = AppContext.Provider;\nexport default AppContext;\n\n// import React, { createContext, useReducer } from 'react';\n// import AppReducer from './AppReducer';\n\n// type AppContextProviderProps = {\n//   children: React.ReactNode;\n// };\n// export const initialState = { filename: '' };\n\n// export interface IAppProps{\n//   fontFilename: string;\n//   updateFontFilename: (filename: string) => void;\n// }\n\n// //https://www.youtube.com/watch?v=hYXFutvueA8&ab_channel=TheNerdyCanuck\n\n// export const AppContext = createContext<IAppProps>({\n//   fontFilename: '',\n//   updateFontFilename: (filename: string) => {\n//     dispatch({\n//       type: 'SET_FILENAME',\n//       filename: filename,\n//     });\n//   }\n// });\n\n// export const AppContextProvider = ({ children }: AppContextProviderProps) => {\n//   const [state, dispatch] = useReducer(AppReducer, initialState);\n\n//   const setFileName = (filename: string) => {\n//     dispatch({\n//       type: 'SET_FILENAME',\n//       filename: filename,\n//     });\n//   };\n\n//   return (\n//     <AppContext.Provider value={initialState}>{children}</AppContext.Provider>\n//   );\n// };\n","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n  inverted?: boolean;\n  content? : string;\n}\nexport default function LoadingComponent({\n  inverted = true,\n  content = 'Loading...',\n}: Props) {\n  return (\n    <Dimmer active={true} inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n}\n","import { Fragment, useCallback, useContext, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport './UploadFile.css';\nimport dragDropFilesImage from '../assets/images/dragdropfiles.svg';\nimport iconslogo from '../assets/images/iconslogo.svg';\nimport { getTypeFontGlyphs } from '../font-parsers/typeFont';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Divider, Grid } from 'semantic-ui-react';\nimport AppContext from '../context/AppContext';\nimport LoadingComponent from './layout/LoadingComponent';\n\nexport const UploadFile = () => {\n  let history = useHistory();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const appContext = useContext(AppContext);\n  appContext.updateFontFilename('');\n\n  const onDrop = useCallback(async (acceptedFiles) => {\n    const file = acceptedFiles[0] as File;\n    if (\n      file.name.endsWith('.ttf') ||\n      file.name.endsWith('.otf') ||\n      file.name.endsWith('.woff')\n    ) {\n      if (!file) return;\n\n      setIsLoading(true);\n\n      const glyphs = await getTypeFontGlyphs(file);\n\n      setIsLoading(false);\n\n      if (glyphs && glyphs.length > 0) {\n        history.push('/editor', { glyphs: glyphs, fileName: file.name });\n      }\n    }\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: '.ttf,.otf,.woff',\n  });\n\n  if (isLoading) return <LoadingComponent />;\n\n  return (\n    <Fragment>\n      <div className=\"Upload-container\">\n        <Grid columns={3} stackable>\n          <Grid.Column width={7}>\n            <div {...getRootProps()}>\n              <img src={dragDropFilesImage} alt=\"drag drop files\" />\n              <input {...getInputProps()} />\n              <h2>Drag & Drop Files</h2>\n              <p>Drop any TTF/OTF/WOFF file</p>\n\n              <Button\n                style={{ backgroundColor: 'rgb(67, 39, 181)', color: 'white' }}\n              >\n                BROWSE YOUR COMPUTER FILES\n              </Button>\n            </div>\n          </Grid.Column>\n\n          <Grid.Column width={1}>\n            <Divider vertical inverted>\n              OR\n            </Divider>\n          </Grid.Column>\n\n          <Grid.Column width={7}>\n            <div>\n              <img src={iconslogo} alt=\"drag drop files\" />\n\n              <h2>Looking for font icon?</h2>\n              <p>Check out popular font icon</p>\n\n              <Button inverted>BROWSE POPULAR ICON FONTS</Button>\n            </div>\n          </Grid.Column>\n        </Grid>\n      </div>\n    </Fragment>\n  );\n};\n","export function toUnicodeString(unicode: number) {\n  let unicodeString = unicode.toString(16);\n\n  let prefix;\n  if (unicodeString.length <= 4) {\n    unicodeString = unicodeString.padStart(4, '0');\n    prefix = 'u';\n  } else {\n    unicodeString = unicodeString.padStart(8, '0');\n    // Using codepoints from the upper bit planes (codes >= 0x10000) require a capital U to get properly encoded into a string literal\n    prefix = 'U';\n  }\n\n  return `\\\\${prefix}${unicodeString}`;\n}\n","import _ from 'lodash';\nimport { Glyph } from 'opentype.js';\nimport { toUnicodeString } from '../utils/stringUtils';\n\nexport function generateCsharpClassCode(className: string, glyphs: Glyph[]) {\n  let s = `\\nstatic class ${className}`;\n  s += '\\n{';\n\n  glyphs.forEach((glyph) => {\n    s += addGlyphToClass(glyph);\n  });\n\n  s += '\\n}';\n  return s;\n\n  function addGlyphToClass(glyph: Glyph) {\n    return `\\n\\tpublic const string ${_.upperFirst(\n      _.camelCase(glyph.name)\n    )} = \"${toUnicodeString(glyph.unicode)}\";`;\n  }\n}\n\nexport function generateCsharpEnumCode(enumName: string, glyphs: Glyph[]) {\n  let s = `\\npublic enum ${enumName}`;\n  s += '\\n{';\n\n  glyphs.forEach((glyph) => {\n    s += addGlyphToEnum(glyph);\n  });\n\n  s += '\\n}';\n  return s;\n\n  function addGlyphToEnum(glyph: Glyph) {\n    return `\\n\\t${_.upperFirst(_.camelCase(glyph.name))} = \"${toUnicodeString(\n      glyph.unicode\n    )}\",`;\n  }\n}\n","import { Glyph } from 'opentype.js';\nimport React from 'react';\nimport './FontIcon.css';\n\ninterface FontIconProps {\n  glyph: Glyph;\n}\n\nexport const FontIcon: React.FC<FontIconProps> = ({ glyph }: FontIconProps) => {\n  const drawIcon = (ref: any) => {\n    if (ref && glyph && typeof glyph.getPath === 'function') {\n      ref.width = 32;\n      ref.height = 32;\n      const ctx = ref.getContext('2d');\n\n      var path = glyph.getPath(0, 28, 28);\n      path.fill = '#4327B5';\n\n      //glyph.draw(ctx!, 0, 30, 30);\n      path.draw(ctx);\n    }\n  };\n\n  return (\n    <div className=\"Font-Icon-Container\">\n      <canvas ref={drawIcon} />\n      <h4 className=\"Font-Icon-Name\">{glyph.name}</h4>\n    </div>\n  );\n};\n","import { Glyph } from 'opentype.js';\nimport React, { Fragment, useState } from 'react';\nimport { Grid, SemanticWIDTHS } from 'semantic-ui-react';\nimport { FontIcon } from './FontIcon';\n\ninterface FontIconListProps {\n  glyphs: Glyph[];\n  screenPercent: number;\n}\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nexport const FontIconList: React.FC<FontIconListProps> = ({\n  glyphs,\n  screenPercent,\n}) => {\n  // const [windowDimensions, setWindowDimensions] = useState(\n  //   getWindowDimensions()\n  // );\n  const windowDimensions = getWindowDimensions();\n  const [glyphsToDisplay, setGlyphsToDisplay] = useState<Glyph[]>(glyphs);\n  const [_, setFilter] = useState('');\n\n  const font_Icon_Container_Width = 120;\n  const columnSpacing = 24;\n  let iconColumnsCount = Math.floor(\n    (windowDimensions.width * screenPercent) /\n      (font_Icon_Container_Width + columnSpacing)\n  ) as SemanticWIDTHS;\n\n  const fontIconsGrid = () => {\n    const glyphsCopy = [...glyphsToDisplay];\n    let gridArray = [];\n    let gridRow: Glyph[] = [];\n\n    while (glyphsCopy[0]) {\n      for (let i = 0; i < iconColumnsCount; i++) {\n        if (glyphsCopy[0]) {\n          gridRow.push(glyphsCopy.shift() as Glyph);\n        }\n      }\n\n      gridArray.push(gridRow);\n      gridRow = [];\n    }\n\n    return gridArray.map((row, idx) => {\n      return (\n        <Grid.Row key={idx}>\n          {row.map((gly) => (\n            <Grid.Column key={gly.name}>\n              <FontIcon key={gly.name} glyph={gly} />\n            </Grid.Column>\n          ))}\n        </Grid.Row>\n      );\n    });\n  };\n  return (\n    <Fragment>\n      {/* idea: https://fontawesome.com/v5.15/icons?d=gallery&p=2&c=users-people */}\n      {/* idea: https://www.icofont.com/icons */}\n      {/* https://semantic-ui.com/modules/search.html */}\n\n      <div className=\"ui search\">\n        <div\n          className=\"ui icon input\"\n          style={{\n            fontSize: '1.6rem',\n            width: '90%',\n          }}\n        >\n          <input\n            onChange={(e) => {\n              setGlyphsToDisplay(\n                glyphs.filter((g) => g.name.includes(e.target.value))\n              );\n\n              setFilter(e.target.value);\n            }}\n            className=\"prompt\"\n            type=\"text\"\n            placeholder=\"Search icons for...\"\n          />\n          <i className=\"search icon\" />\n        </div>\n        <div className=\"results\"></div>\n      </div>\n\n      <br />\n      <br />\n      <Grid columns={iconColumnsCount} style={{ innerWidth: '45vw' }}>\n        {fontIconsGrid()}\n      </Grid>\n    </Fragment>\n  );\n};\n","import { Glyph } from 'opentype.js';\nimport { useLocation } from 'react-router-dom';\nimport {\n  generateCsharpClassCode,\n  generateCsharpEnumCode,\n} from '../code-gen/csharpCodegen';\nimport MonacoEditor from '@monaco-editor/react';\nimport { Grid, Container, Button, Icon, Dropdown } from 'semantic-ui-react';\nimport './Editor.css';\nimport { FontIconList } from '../components/FontIconList';\nimport { Fragment, useCallback, useContext, useState } from 'react';\nimport AppContext from '../context/AppContext';\nimport debounce from 'lodash.debounce';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { toast, ToastContainer } from 'react-toastify';\n\nconst codeTypeOptions = [\n  { key: 1, text: 'C# Class ', value: 'csharpClass' },\n  { key: 2, text: 'C# Enum  ', value: 'csharpEnum' },\n];\ninterface EditorProps {\n  glyphs: Glyph[];\n  fileName: string;\n}\n\nexport default function Editor() {\n  const { glyphs, fileName } = useLocation<EditorProps>().state;\n  const appContext = useContext(AppContext);\n  appContext.updateFontFilename(fileName);\n\n  const csharpClassName = fileName.split('.')[0];\n  const csharpEnumName = csharpClassName;\n  const [csharpCode, setCsharpCode] = useState(\n    generateCsharpClassCode(csharpClassName, glyphs)\n  );\n\n  const saveEditCsharpCode = useCallback(\n    debounce((nextValue) => setCsharpCode(nextValue), 500),\n    []\n  );\n\n  const handleEditorCodeChange = (editedCode: string | undefined) => {\n    saveEditCsharpCode(editedCode);\n  };\n\n  const copyCode = useCallback(\n    debounce(() => toast.success('Code copied to clipboard'), 500),\n    []\n  );\n\n  const handleCopyCodeChange = () => {\n    copyCode();\n  };\n\n  const [generatedCodeType, setGeneratedCodeType] = useState(\n    codeTypeOptions[0].value\n  );\n\n  const optionChange = (e: any, option: any) => {\n    setGeneratedCodeType(option.value);\n    switch (option.value) {\n      case 'csharpClass':\n        setCsharpCode(generateCsharpClassCode(csharpClassName, glyphs));\n        break;\n      case 'csharpEnum':\n        setCsharpCode(generateCsharpEnumCode(csharpEnumName, glyphs));\n        break;\n    }\n  };\n\n  if (glyphs) {\n    //total is 16\n    const fontListWidth = 10;\n    const editorWidth = 6;\n\n    return (\n      <Fragment>\n        <Container>\n          <Grid columns={2} relaxed=\"very\" stackable>\n            <Grid.Column width={fontListWidth}>\n              <br />\n              <br />\n              <FontIconList\n                glyphs={glyphs}\n                screenPercent={fontListWidth / 16}\n              />\n            </Grid.Column>\n\n            <Grid.Column width={editorWidth}>\n              <div\n                style={{\n                  display: 'flex',\n                  margin: '20px 30px',\n                  justifyContent: 'space-around',\n                }}\n              >\n                <ToastContainer\n                  position=\"bottom-right\"\n                  hideProgressBar\n                  theme=\"colored\"\n                  autoClose={1000}\n                />\n\n                <CopyToClipboard\n                  text={csharpCode}\n                  onCopy={handleCopyCodeChange}\n                >\n                  <Button inverted>\n                    <Icon name=\"copy\" />\n                    Copy to clipboard\n                  </Button>\n                </CopyToClipboard>\n\n                <Dropdown\n                  button\n                  className=\"icon\"\n                  floating\n                  labeled\n                  onChange={optionChange}\n                  options={codeTypeOptions}\n                  value={generatedCodeType}\n                />\n              </div>\n\n              <MonacoEditor\n                onChange={handleEditorCodeChange}\n                height=\"99%\"\n                defaultLanguage=\"csharp\"\n                value={csharpCode}\n                theme=\"vs-dark\"\n              />\n            </Grid.Column>\n          </Grid>\n        </Container>\n      </Fragment>\n    );\n  } else {\n    return <div>Unable to read font glyphs</div>;\n  }\n}\n","export default __webpack_public_path__ + \"static/media/font2csharp.33c576b3.svg\";","import React, { Fragment, useContext, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Button, Dropdown, Icon, Menu } from 'semantic-ui-react';\nimport AppContext from '../../context/AppContext';\nimport './NavBar.css';\nimport font2csharp from '../../assets/images/font2csharp.svg';\n\ninterface NavBarProps {\n  uploadFileName?: string;\n  isEditing?: boolean;\n}\n\nexport const NavBar: React.FC<NavBarProps> = ({ uploadFileName }) => {\n  const appContext = useContext(AppContext);\n  uploadFileName = appContext.fontFilename;\n\n  const [infoValue, setInfoValue] = useState('');\n  const options = [\n    { key: 1, text: 'Submit an Issue', value: 'issue' },\n    { key: 2, text: 'Support this Project', value: 'support' },\n  ];\n\n  const optionChange = (e: any, option: any) => {\n    if (option.value === 'issue') {\n      setInfoValue('');\n      window.open('https://www.google.com');\n    }\n  };\n\n  return (\n    <Menu inverted fixed=\"top\" secondary>\n      <Menu.Item header>\n        <div>\n          <img src={font2csharp} alt=\"font 2 csharp\" height=\"32\" />\n        </div>\n      </Menu.Item>\n\n      {uploadFileName && (\n        <Fragment>\n          <Menu.Item>\n            <div className=\"vertical-line\" />\n          </Menu.Item>\n          <Menu.Item>\n            <h2>{uploadFileName}</h2>\n          </Menu.Item>\n          <Menu.Item position=\"right\" as={NavLink} to=\"/\" header>\n            <Button inverted>\n              <Icon name=\"upload\" />\n              UPLOAD ANOTHER FONT\n            </Button>\n          </Menu.Item>\n          <Menu.Item as={NavLink} to=\"/\" header>\n            <Button>\n              <Icon name=\"download\" />\n              DOWNLOAD FILE\n            </Button>\n          </Menu.Item>\n        </Fragment>\n      )}\n\n      <Menu.Item position={uploadFileName ? undefined : 'right'}>\n        <Button.Group inverted>\n          <Dropdown\n            className=\"button icon\"\n            icon=\"info\"\n            floating\n            onChange={optionChange}\n            options={options}\n            value={infoValue}\n          />\n        </Button.Group>\n      </Menu.Item>\n    </Menu>\n  );\n};\n","import { useState } from 'react';\nimport { Route } from 'react-router';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { UploadFile } from './components/UploadFile';\nimport Editor from './editor/Editor';\nimport { BrowserRouter, HashRouter, Switch } from 'react-router-dom';\nimport { AppContextProvider } from './context/AppContext';\nimport { NavBar } from './components/layout/NavBar';\n\nfunction App() {\n  const [fontFilename, setFontfileName] = useState('');\n\n  const updateFontFilename = (filename: string) => {\n    setFontfileName(filename);\n  };\n\n  const appContextValues = {\n    fontFilename,\n    updateFontFilename,\n  };\n\n  return (\n    <BrowserRouter basename=\"https://thinhtrana.github.io/font-icon-to-csharp\">\n      <AppContextProvider value={appContextValues}>\n        <div className=\"App\">\n          <NavBar />\n          <Switch>\n            <Route exact path=\"/\" component={UploadFile} />\n            <Route path=\"/upload\" component={UploadFile} />\n            <Route path=\"/editor\" component={Editor} />\n          </Switch>\n        </div>\n      </AppContextProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}